msgid ""
msgstr ""
"POT-Creation-Date: 2025-06-10 16:21+0200\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: @lingui/cli\n"
"Language: en\n"
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Plural-Forms: \n"

#: src/components/AudioOutputSelect.tsx:53
msgid "Loading devices..."
msgstr "Loading devices..."

#: src/components/AudioOutputSelect.tsx:61
msgid "Could not get audio output devices"
msgstr "Could not get audio output devices"

#: src/components/AudioOutputSelect.tsx:69
msgid "No audio devices found"
msgstr "No audio devices found"

#: src/components/ButtonRepeat.tsx:35
msgid "Repeat"
msgstr "Repeat"

#: src/components/ButtonShuffle.tsx:25
msgid "Shuffle"
msgstr "Shuffle"

#: src/components/Cover.tsx:41
msgid "Album cover"
msgstr "Album cover"

#. placeholder {0}: import { useLingui } from '@lingui/react/macro'; import { getCurrentWindow } from '@tauri-apps/api/window'; import { lstat } from '@tauri-apps/plugin-fs'; import cx from 'classnames'; import { useEffect, useState } from 'react'; import { plural } from '@lingui/core/macro'; import useInvalidate from '../hooks/useInvalidate'; import { logAndNotifyError } from '../lib/utils'; import { useLibraryAPI } from '../stores/useLibraryStore'; import { useToastsAPI } from '../stores/useToastsStore'; import styles from './DropzoneImport.module.css'; export default function DropzoneImport() { const libraryAPI = useLibraryAPI(); const toastsAPI = useToastsAPI(); const { t } = useLingui(); const [isShown, setIsShown] = useState(false); const invalidate = useInvalidate(); // Simplification welcome useEffect(() => { async function attachFileDropEvent() { const unlisten = getCurrentWindow() .onDragDropEvent(async (event) => { if (event.payload.type === 'over') { setIsShown(true); } else if (event.payload.type === 'drop') { setIsShown(false); // Museeks does not deal in terms of files anymore, so we need to only retain folders. // Why? Because in case a user imports a specific file from within a folder, it should // ignore all other files, but it cannot do that as of today. const fileInfos = await Promise.all( event.payload.paths.map(async (path) => { return { ...(await lstat(path)), path, }; }), ); const folders = fileInfos .filter((fileOrFolder) => fileOrFolder.isDirectory) .map((folderInfo) => folderInfo.path); const skippedItemsCount = event.payload.paths.length - folders.length; if (skippedItemsCount !== 0) { const message = plural(skippedItemsCount, { one: t`${skippedItemsCount} non-folder item ignored`, other: t`${skippedItemsCount} non-folder items ignored`, }); toastsAPI.add('warning', message); } if (folders.length > 0) { await libraryAPI.addLibraryFolders(folders); const message = plural(folders.length, { one: t`${folders.length} folder added to the library`, other: t`${folders.length} folders added to the library`, }); toastsAPI.add('success', message); await libraryAPI.scan(); invalidate(); } } else { setIsShown(false); } }) .catch(logAndNotifyError); return unlisten; } const unlisten = attachFileDropEvent().catch(logAndNotifyError); return function cleanup() { unlisten.then((u) => (u ? u() : null)); }; }, [ libraryAPI.addLibraryFolders, libraryAPI.scan, toastsAPI.add, invalidate, t, ]); const classes = cx(styles.dropzone, { [styles.shown]: isShown, }); return ( <div className={classes}> <div className={styles.dropzoneTitle}>{t`Add music to the library`}</div> <span>{t`Drop folders anywhere`}</span> </div> ); } 
#. placeholder {1}: import { useLingui } from '@lingui/react/macro'; import { getCurrentWindow } from '@tauri-apps/api/window'; import { lstat } from '@tauri-apps/plugin-fs'; import cx from 'classnames'; import { useEffect, useState } from 'react'; import { plural } from '@lingui/core/macro'; import useInvalidate from '../hooks/useInvalidate'; import { logAndNotifyError } from '../lib/utils'; import { useLibraryAPI } from '../stores/useLibraryStore'; import { useToastsAPI } from '../stores/useToastsStore'; import styles from './DropzoneImport.module.css'; export default function DropzoneImport() { const libraryAPI = useLibraryAPI(); const toastsAPI = useToastsAPI(); const { t } = useLingui(); const [isShown, setIsShown] = useState(false); const invalidate = useInvalidate(); // Simplification welcome useEffect(() => { async function attachFileDropEvent() { const unlisten = getCurrentWindow() .onDragDropEvent(async (event) => { if (event.payload.type === 'over') { setIsShown(true); } else if (event.payload.type === 'drop') { setIsShown(false); // Museeks does not deal in terms of files anymore, so we need to only retain folders. // Why? Because in case a user imports a specific file from within a folder, it should // ignore all other files, but it cannot do that as of today. const fileInfos = await Promise.all( event.payload.paths.map(async (path) => { return { ...(await lstat(path)), path, }; }), ); const folders = fileInfos .filter((fileOrFolder) => fileOrFolder.isDirectory) .map((folderInfo) => folderInfo.path); const skippedItemsCount = event.payload.paths.length - folders.length; if (skippedItemsCount !== 0) { const message = plural(skippedItemsCount, { one: t`${skippedItemsCount} non-folder item ignored`, other: t`${skippedItemsCount} non-folder items ignored`, }); toastsAPI.add('warning', message); } if (folders.length > 0) { await libraryAPI.addLibraryFolders(folders); const message = plural(folders.length, { one: t`${folders.length} folder added to the library`, other: t`${folders.length} folders added to the library`, }); toastsAPI.add('success', message); await libraryAPI.scan(); invalidate(); } } else { setIsShown(false); } }) .catch(logAndNotifyError); return unlisten; } const unlisten = attachFileDropEvent().catch(logAndNotifyError); return function cleanup() { unlisten.then((u) => (u ? u() : null)); }; }, [ libraryAPI.addLibraryFolders, libraryAPI.scan, toastsAPI.add, invalidate, t, ]); const classes = cx(styles.dropzone, { [styles.shown]: isShown, }); return ( <div className={classes}> <div className={styles.dropzoneTitle}>{t`Add music to the library`}</div> <span>{t`Drop folders anywhere`}</span> </div> ); } 
#: src/components/DropzoneImport.tsx:52
msgid "{skippedItemsCount, plural, one {{0}} other {{1}}}"
msgstr "{skippedItemsCount, plural, one {{0}} other {{1}}}"

#: src/components/DropzoneImport.tsx:53
msgid "{skippedItemsCount} non-folder item ignored"
msgstr "{skippedItemsCount} non-folder item ignored"

#: src/components/DropzoneImport.tsx:54
msgid "{skippedItemsCount} non-folder items ignored"
msgstr "{skippedItemsCount} non-folder items ignored"

#. placeholder {0}: folders.length
#. placeholder {1}: import { useLingui } from '@lingui/react/macro'; import { getCurrentWindow } from '@tauri-apps/api/window'; import { lstat } from '@tauri-apps/plugin-fs'; import cx from 'classnames'; import { useEffect, useState } from 'react'; import { plural } from '@lingui/core/macro'; import useInvalidate from '../hooks/useInvalidate'; import { logAndNotifyError } from '../lib/utils'; import { useLibraryAPI } from '../stores/useLibraryStore'; import { useToastsAPI } from '../stores/useToastsStore'; import styles from './DropzoneImport.module.css'; export default function DropzoneImport() { const libraryAPI = useLibraryAPI(); const toastsAPI = useToastsAPI(); const { t } = useLingui(); const [isShown, setIsShown] = useState(false); const invalidate = useInvalidate(); // Simplification welcome useEffect(() => { async function attachFileDropEvent() { const unlisten = getCurrentWindow() .onDragDropEvent(async (event) => { if (event.payload.type === 'over') { setIsShown(true); } else if (event.payload.type === 'drop') { setIsShown(false); // Museeks does not deal in terms of files anymore, so we need to only retain folders. // Why? Because in case a user imports a specific file from within a folder, it should // ignore all other files, but it cannot do that as of today. const fileInfos = await Promise.all( event.payload.paths.map(async (path) => { return { ...(await lstat(path)), path, }; }), ); const folders = fileInfos .filter((fileOrFolder) => fileOrFolder.isDirectory) .map((folderInfo) => folderInfo.path); const skippedItemsCount = event.payload.paths.length - folders.length; if (skippedItemsCount !== 0) { const message = plural(skippedItemsCount, { one: t`${skippedItemsCount} non-folder item ignored`, other: t`${skippedItemsCount} non-folder items ignored`, }); toastsAPI.add('warning', message); } if (folders.length > 0) { await libraryAPI.addLibraryFolders(folders); const message = plural(folders.length, { one: t`${folders.length} folder added to the library`, other: t`${folders.length} folders added to the library`, }); toastsAPI.add('success', message); await libraryAPI.scan(); invalidate(); } } else { setIsShown(false); } }) .catch(logAndNotifyError); return unlisten; } const unlisten = attachFileDropEvent().catch(logAndNotifyError); return function cleanup() { unlisten.then((u) => (u ? u() : null)); }; }, [ libraryAPI.addLibraryFolders, libraryAPI.scan, toastsAPI.add, invalidate, t, ]); const classes = cx(styles.dropzone, { [styles.shown]: isShown, }); return ( <div className={classes}> <div className={styles.dropzoneTitle}>{t`Add music to the library`}</div> <span>{t`Drop folders anywhere`}</span> </div> ); } 
#. placeholder {2}: import { useLingui } from '@lingui/react/macro'; import { getCurrentWindow } from '@tauri-apps/api/window'; import { lstat } from '@tauri-apps/plugin-fs'; import cx from 'classnames'; import { useEffect, useState } from 'react'; import { plural } from '@lingui/core/macro'; import useInvalidate from '../hooks/useInvalidate'; import { logAndNotifyError } from '../lib/utils'; import { useLibraryAPI } from '../stores/useLibraryStore'; import { useToastsAPI } from '../stores/useToastsStore'; import styles from './DropzoneImport.module.css'; export default function DropzoneImport() { const libraryAPI = useLibraryAPI(); const toastsAPI = useToastsAPI(); const { t } = useLingui(); const [isShown, setIsShown] = useState(false); const invalidate = useInvalidate(); // Simplification welcome useEffect(() => { async function attachFileDropEvent() { const unlisten = getCurrentWindow() .onDragDropEvent(async (event) => { if (event.payload.type === 'over') { setIsShown(true); } else if (event.payload.type === 'drop') { setIsShown(false); // Museeks does not deal in terms of files anymore, so we need to only retain folders. // Why? Because in case a user imports a specific file from within a folder, it should // ignore all other files, but it cannot do that as of today. const fileInfos = await Promise.all( event.payload.paths.map(async (path) => { return { ...(await lstat(path)), path, }; }), ); const folders = fileInfos .filter((fileOrFolder) => fileOrFolder.isDirectory) .map((folderInfo) => folderInfo.path); const skippedItemsCount = event.payload.paths.length - folders.length; if (skippedItemsCount !== 0) { const message = plural(skippedItemsCount, { one: t`${skippedItemsCount} non-folder item ignored`, other: t`${skippedItemsCount} non-folder items ignored`, }); toastsAPI.add('warning', message); } if (folders.length > 0) { await libraryAPI.addLibraryFolders(folders); const message = plural(folders.length, { one: t`${folders.length} folder added to the library`, other: t`${folders.length} folders added to the library`, }); toastsAPI.add('success', message); await libraryAPI.scan(); invalidate(); } } else { setIsShown(false); } }) .catch(logAndNotifyError); return unlisten; } const unlisten = attachFileDropEvent().catch(logAndNotifyError); return function cleanup() { unlisten.then((u) => (u ? u() : null)); }; }, [ libraryAPI.addLibraryFolders, libraryAPI.scan, toastsAPI.add, invalidate, t, ]); const classes = cx(styles.dropzone, { [styles.shown]: isShown, }); return ( <div className={classes}> <div className={styles.dropzoneTitle}>{t`Add music to the library`}</div> <span>{t`Drop folders anywhere`}</span> </div> ); } 
#: src/components/DropzoneImport.tsx:63
msgid "{0, plural, one {{1}} other {{2}}}"
msgstr "{0, plural, one {{1}} other {{2}}}"

#. placeholder {0}: folders.length
#: src/components/DropzoneImport.tsx:64
msgid "{0} folder added to the library"
msgstr "{0} folder added to the library"

#. placeholder {0}: folders.length
#: src/components/DropzoneImport.tsx:65
msgid "{0} folders added to the library"
msgstr "{0} folders added to the library"

#: src/components/DropzoneImport.tsx:102
msgid "Add music to the library"
msgstr "Add music to the library"

#: src/components/DropzoneImport.tsx:103
msgid "Drop folders anywhere"
msgstr "Drop folders anywhere"

#: src/components/Footer.tsx:22
#: src/routes/settings.tsx:38
msgid "Library"
msgstr "Library"

#: src/components/Footer.tsx:31
#: src/routes/artists.tsx:52
msgid "Artists"
msgstr "Artists"

#: src/components/Footer.tsx:40
#: src/routes/playlists.tsx:171
#: src/routes/settings.ui.tsx:109
msgid "Playlists"
msgstr "Playlists"

#: src/components/Footer.tsx:49
msgid "Settings"
msgstr "Settings"

#: src/components/Footer.tsx:80
msgid "scanning tracks..."
msgstr "scanning tracks..."

#: src/components/GlobalErrors.tsx:31
msgid "Something wrong happened: {errorMessage}"
msgstr "Something wrong happened: {errorMessage}"

#: src/components/GlobalErrors.tsx:45
msgid "how?"
msgstr "how?"

#. placeholder {0}: location.pathname
#: src/components/GlobalErrors.tsx:48
msgid "View not found ({0}). How did you get here?"
msgstr "View not found ({0}). How did you get here?"

#: src/components/GlobalErrors.tsx:60
msgid "If it happens again, please <0>report an issue</0>"
msgstr "If it happens again, please <0>report an issue</0>"

#: src/components/Header.tsx:35
msgid "Queue"
msgstr "Queue"

#: src/components/PlayerControls.tsx:20
msgid "Previous"
msgstr "Previous"

#: src/components/PlayerControls.tsx:29
msgid "Pause"
msgstr "Pause"

#: src/components/PlayerControls.tsx:29
msgid "Play"
msgstr "Play"

#: src/components/PlayerControls.tsx:41
msgid "Next"
msgstr "Next"

#: src/components/QueueEmpty.tsx:7
msgid "Queue is empty"
msgstr "Queue is empty"

#: src/components/QueueList.tsx:81
msgid "clear queue"
msgstr "clear queue"

#: src/components/QueueList.tsx:107
msgid "see more"
msgstr "see more"

#: src/components/Search.tsx:44
msgid "search..."
msgstr "search..."

#. placeholder {0}: tracks.length
#. placeholder {0}: props.count
#: src/components/TrackListStatus.tsx:11
#: src/components/TracksListGrouped.tsx:112
msgid "{0, plural, one {track} other {tracks}}"
msgstr "{0, plural, one {track} other {tracks}}"

#: src/components/TracksList.tsx:240
msgid "Create new playlist..."
msgstr "Create new playlist..."

#: src/components/TracksList.tsx:243
#: src/routes/playlists.tsx:62
msgid "New playlist"
msgstr "New playlist"

#: src/components/TracksList.tsx:256
msgid "No playlists"
msgstr "No playlists"

#: src/components/TracksList.tsx:279
msgid "{selectedCount, plural, one {{selectedCount} track selected} other {{selectedCount} tracks selected}}"
msgstr "{selectedCount, plural, one {{selectedCount} track selected} other {{selectedCount} tracks selected}}"

#: src/components/TracksList.tsx:291
msgid "Add to queue"
msgstr "Add to queue"

#: src/components/TracksList.tsx:297
msgid "Play next"
msgstr "Play next"

#: src/components/TracksList.tsx:307
msgid "Add to playlist"
msgstr "Add to playlist"

#: src/components/TracksList.tsx:317
msgid "Search for \"{artist}\" "
msgstr "Search for \"{artist}\" "

#. placeholder {0}: track.album
#: src/components/TracksList.tsx:324
msgid "Search for \"{0}\""
msgstr "Search for \"{0}\""

#: src/components/TracksList.tsx:347
msgid "Edit track"
msgstr "Edit track"

#: src/components/TracksList.tsx:357
msgid "Show in file manager"
msgstr "Show in file manager"

#: src/components/TracksList.tsx:363
msgid "Remove from library"
msgstr "Remove from library"

#: src/components/TracksListHeader.tsx:49
#: src/routes/tracks.$trackID.tsx:88
msgid "Title"
msgstr "Title"

#: src/components/TracksListHeader.tsx:55
#: src/routes/tracks.$trackID.tsx:241
msgid "Duration"
msgstr "Duration"

#: src/components/TracksListHeader.tsx:61
msgid "Artist"
msgstr "Artist"

#: src/components/TracksListHeader.tsx:67
#: src/routes/tracks.$trackID.tsx:100
msgid "Album"
msgstr "Album"

#: src/components/TracksListHeader.tsx:73
#: src/routes/tracks.$trackID.tsx:143
msgid "Genre"
msgstr "Genre"

#: src/components/VolumeControl.tsx:86
#: src/components/VolumeControl.tsx:107
msgid "Volume"
msgstr "Volume"

#: src/routes/artists.tsx:69
msgid "No artist selected"
msgstr "No artist selected"

#: src/routes/library.tsx:67
msgid "Loading library..."
msgstr "Loading library..."

#: src/routes/library.tsx:78
msgid "Your library is being scanned =)"
msgstr "Your library is being scanned =)"

#: src/routes/library.tsx:81
msgid "hold on..."
msgstr "hold on..."

#: src/routes/library.tsx:92
msgid "There is no music in your library :("
msgstr "There is no music in your library :("

#: src/routes/library.tsx:95
msgid "you can <0>add your music here</0>"
msgstr "you can <0>add your music here</0>"

#: src/routes/library.tsx:111
#: src/routes/playlists.$playlistID.tsx:110
msgid "Your search returned no results"
msgstr "Your search returned no results"

#: src/routes/playlists.$playlistID.tsx:76
msgid "Remove from playlist"
msgstr "Remove from playlist"

#: src/routes/playlists.$playlistID.tsx:92
#: src/routes/playlists.$playlistID.tsx:121
msgid "Empty playlist"
msgstr "Empty playlist"

#: src/routes/playlists.$playlistID.tsx:95
#: src/routes/playlists.$playlistID.tsx:124
msgid "You can add tracks from the <0>library view</0>"
msgstr "You can add tracks from the <0>library view</0>"

#: src/routes/playlists.tsx:92
msgid "Delete"
msgstr "Delete"

#: src/routes/playlists.tsx:106
msgid "Duplicate"
msgstr "Duplicate"

#: src/routes/playlists.tsx:114
msgid "Export"
msgstr "Export"

#: src/routes/playlists.tsx:141
msgid "You haven't created any playlist yet"
msgstr "You haven't created any playlist yet"

#: src/routes/playlists.tsx:150
msgid "create one now"
msgstr "create one now"

#: src/routes/playlists.tsx:159
msgid "No playlist selected"
msgstr "No playlist selected"

#: src/routes/playlists.tsx:176
msgid "New Playlist"
msgstr "New Playlist"

#: src/routes/settings.about.tsx:30
msgid "About Museeks"
msgstr "About Museeks"

#: src/routes/settings.about.tsx:42
msgid "release notes"
msgstr "release notes"

#: src/routes/settings.about.tsx:46
msgid "Automatically check for updates"
msgstr "Automatically check for updates"

#: src/routes/settings.about.tsx:56
msgid "Check for update"
msgstr "Check for update"

#: src/routes/settings.about.tsx:62
msgid "Contributors"
msgstr "Contributors"

#: src/routes/settings.about.tsx:65
msgid "Made with <0/> by Pierre de la Martinière (<1>martpie.io</1>) and a bunch of <2>great people</2>"
msgstr "Made with <0/> by Pierre de la Martinière (<1>martpie.io</1>) and a bunch of <2>great people</2>"

#: src/routes/settings.about.tsx:83
msgid "Report issue / Ask for a feature"
msgstr "Report issue / Ask for a feature"

#: src/routes/settings.about.tsx:86
msgid "Bugs happen. Please, do not hesitate to report them or to ask for features you would like to see, using the <0>issue tracker</0>."
msgstr "Bugs happen. Please, do not hesitate to report them or to ask for features you would like to see, using the <0>issue tracker</0>."

#: src/routes/settings.about.tsx:101
msgid "Internals"
msgstr "Internals"

#: src/routes/settings.about.tsx:106
msgid "Open storage directory"
msgstr "Open storage directory"

#: src/routes/settings.audio.tsx:26
msgid "Playback rate"
msgstr "Playback rate"

#: src/routes/settings.audio.tsx:27
msgid "Increase the playback rate: a value of 2 will play your music at a 2x speed"
msgstr "Increase the playback rate: a value of 2 will play your music at a 2x speed"

#: src/routes/settings.audio.tsx:43
msgid "Audio output"
msgstr "Audio output"

#: src/routes/settings.audio.tsx:44
msgid "Advanced: set a custom audio output device."
msgstr "Advanced: set a custom audio output device."

#: src/routes/settings.audio.tsx:53
msgid "Follow playing track"
msgstr "Follow playing track"

#: src/routes/settings.audio.tsx:54
msgid "Automatically follow the currently playing track (only when the app is not focused)"
msgstr "Automatically follow the currently playing track (only when the app is not focused)"

#: src/routes/settings.library.tsx:46
msgid "Files"
msgstr "Files"

#: src/routes/settings.library.tsx:50
msgid "There are no folders in your library."
msgstr "There are no folders in your library."

#: src/routes/settings.library.tsx:62
msgid "Remove"
msgstr "Remove"

#: src/routes/settings.library.tsx:82
msgid "Add folder"
msgstr "Add folder"

#: src/routes/settings.library.tsx:88
msgid "Scan"
msgstr "Scan"

#: src/routes/settings.library.tsx:93
msgid "Force the refresh of all tracks tags"
msgstr "Force the refresh of all tracks tags"

#: src/routes/settings.library.tsx:95
msgid "Refresh"
msgstr "Refresh"

#: src/routes/settings.library.tsx:99
msgid "<0>.m3u</0> files will also be imported as playlists."
msgstr "<0>.m3u</0> files will also be imported as playlists."

#: src/routes/settings.library.tsx:107
msgid "Automatically refresh library on startup"
msgstr "Automatically refresh library on startup"

#: src/routes/settings.library.tsx:114
msgid "Danger zone"
msgstr "Danger zone"

#: src/routes/settings.library.tsx:117
msgid "Delete all tracks and playlists from Museeks."
msgstr "Delete all tracks and playlists from Museeks."

#: src/routes/settings.library.tsx:122
msgid "Fully reset the library"
msgstr "Fully reset the library"

#: src/routes/settings.library.tsx:126
msgid "Reset library"
msgstr "Reset library"

#: src/routes/settings.tsx:41
msgid "Audio"
msgstr "Audio"

#: src/routes/settings.tsx:44
msgid "Interface"
msgstr "Interface"

#: src/routes/settings.tsx:47
msgid "About"
msgstr "About"

#: src/routes/settings.ui.tsx:35
msgid "Theme"
msgstr "Theme"

#: src/routes/settings.ui.tsx:36
msgid "Change the appearance of the interface"
msgstr "Change the appearance of the interface"

#: src/routes/settings.ui.tsx:43
msgid "System (default)"
msgstr "System (default)"

#: src/routes/settings.ui.tsx:55
msgid "Language"
msgstr "Language"

#: src/routes/settings.ui.tsx:63
msgid "Auto"
msgstr "Auto"

#: src/routes/settings.ui.tsx:75
msgid "Tracks density"
msgstr "Tracks density"

#: src/routes/settings.ui.tsx:76
#: src/routes/settings.ui.tsx:97
msgid "Change the default view when starting the application"
msgstr "Change the default view when starting the application"

#: src/routes/settings.ui.tsx:86
msgid "Normal (default)"
msgstr "Normal (default)"

#: src/routes/settings.ui.tsx:89
msgid "Compact"
msgstr "Compact"

#: src/routes/settings.ui.tsx:95
msgid "Default view"
msgstr "Default view"

#: src/routes/settings.ui.tsx:106
msgid "Library (default)"
msgstr "Library (default)"

#: src/routes/settings.ui.tsx:116
msgid "Display Notifications"
msgstr "Display Notifications"

#: src/routes/settings.ui.tsx:117
msgid "Send notifications when the playing track changes"
msgstr "Send notifications when the playing track changes"

#: src/routes/settings.ui.tsx:127
msgid "Sleep mode blocker"
msgstr "Sleep mode blocker"

#: src/routes/settings.ui.tsx:128
msgid "Prevent the computer from going into sleep mode when playing"
msgstr "Prevent the computer from going into sleep mode when playing"

#. placeholder {0}: track.title
#: src/routes/tracks.$trackID.tsx:84
msgid "Edit \"{0}\""
msgstr "Edit \"{0}\""

#: src/routes/tracks.$trackID.tsx:112
msgid "Album Artist"
msgstr "Album Artist"

#: src/routes/tracks.$trackID.tsx:127
msgid "Track Artists"
msgstr "Track Artists"

#: src/routes/tracks.$trackID.tsx:128
msgid "You can add multiple artists with commas"
msgstr "You can add multiple artists with commas"

#: src/routes/tracks.$trackID.tsx:144
msgid "You can add multiple genres with commas"
msgstr "You can add multiple genres with commas"

#: src/routes/tracks.$trackID.tsx:159
msgid "Year"
msgstr "Year"

#: src/routes/tracks.$trackID.tsx:174
msgid "Track Nº"
msgstr "Track Nº"

#: src/routes/tracks.$trackID.tsx:189
#: src/routes/tracks.$trackID.tsx:223
msgid "Of"
msgstr "Of"

#: src/routes/tracks.$trackID.tsx:208
msgid "Disk Nº"
msgstr "Disk Nº"

#: src/routes/tracks.$trackID.tsx:250
msgid "Path"
msgstr "Path"

#: src/routes/tracks.$trackID.tsx:259
msgid "Cancel"
msgstr "Cancel"

#: src/routes/tracks.$trackID.tsx:262
msgid "Save"
msgstr "Save"

#: src/routes/tracks.$trackID.tsx:267
msgid "Clicking \"save\" will only update the library data, but will not save it to the original file."
msgstr "Clicking \"save\" will only update the library data, but will not save it to the original file."
