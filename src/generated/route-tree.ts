/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as SettingsRouteImport } from './../routes/settings'
import { Route as PlaylistsRouteImport } from './../routes/playlists'
import { Route as LibraryRouteImport } from './../routes/library'
import { Route as ArtistsRouteImport } from './../routes/artists'
import { Route as TracksTrackIDRouteImport } from './../routes/tracks.$trackID'
import { Route as SettingsUiRouteImport } from './../routes/settings.ui'
import { Route as SettingsLibraryRouteImport } from './../routes/settings.library'
import { Route as SettingsAudioRouteImport } from './../routes/settings.audio'
import { Route as SettingsAboutRouteImport } from './../routes/settings.about'
import { Route as PlaylistsPlaylistIDRouteImport } from './../routes/playlists.$playlistID'
import { Route as ArtistsArtistIDRouteImport } from './../routes/artists.$artistID'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsRoute = PlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistsRoute = ArtistsRouteImport.update({
  id: '/artists',
  path: '/artists',
  getParentRoute: () => rootRouteImport,
} as any)
const TracksTrackIDRoute = TracksTrackIDRouteImport.update({
  id: '/tracks/$trackID',
  path: '/tracks/$trackID',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsUiRoute = SettingsUiRouteImport.update({
  id: '/ui',
  path: '/ui',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsLibraryRoute = SettingsLibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAudioRoute = SettingsAudioRouteImport.update({
  id: '/audio',
  path: '/audio',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAboutRoute = SettingsAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => SettingsRoute,
} as any)
const PlaylistsPlaylistIDRoute = PlaylistsPlaylistIDRouteImport.update({
  id: '/$playlistID',
  path: '/$playlistID',
  getParentRoute: () => PlaylistsRoute,
} as any)
const ArtistsArtistIDRoute = ArtistsArtistIDRouteImport.update({
  id: '/$artistID',
  path: '/$artistID',
  getParentRoute: () => ArtistsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/artists': typeof ArtistsRouteWithChildren
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/settings': typeof SettingsRouteWithChildren
  '/artists/$artistID': typeof ArtistsArtistIDRoute
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/audio': typeof SettingsAudioRoute
  '/settings/library': typeof SettingsLibraryRoute
  '/settings/ui': typeof SettingsUiRoute
  '/tracks/$trackID': typeof TracksTrackIDRoute
}
export interface FileRoutesByTo {
  '/artists': typeof ArtistsRouteWithChildren
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/settings': typeof SettingsRouteWithChildren
  '/artists/$artistID': typeof ArtistsArtistIDRoute
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/audio': typeof SettingsAudioRoute
  '/settings/library': typeof SettingsLibraryRoute
  '/settings/ui': typeof SettingsUiRoute
  '/tracks/$trackID': typeof TracksTrackIDRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/artists': typeof ArtistsRouteWithChildren
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/settings': typeof SettingsRouteWithChildren
  '/artists/$artistID': typeof ArtistsArtistIDRoute
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings/about': typeof SettingsAboutRoute
  '/settings/audio': typeof SettingsAudioRoute
  '/settings/library': typeof SettingsLibraryRoute
  '/settings/ui': typeof SettingsUiRoute
  '/tracks/$trackID': typeof TracksTrackIDRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/artists'
    | '/library'
    | '/playlists'
    | '/settings'
    | '/artists/$artistID'
    | '/playlists/$playlistID'
    | '/settings/about'
    | '/settings/audio'
    | '/settings/library'
    | '/settings/ui'
    | '/tracks/$trackID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/artists'
    | '/library'
    | '/playlists'
    | '/settings'
    | '/artists/$artistID'
    | '/playlists/$playlistID'
    | '/settings/about'
    | '/settings/audio'
    | '/settings/library'
    | '/settings/ui'
    | '/tracks/$trackID'
  id:
    | '__root__'
    | '/artists'
    | '/library'
    | '/playlists'
    | '/settings'
    | '/artists/$artistID'
    | '/playlists/$playlistID'
    | '/settings/about'
    | '/settings/audio'
    | '/settings/library'
    | '/settings/ui'
    | '/tracks/$trackID'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ArtistsRoute: typeof ArtistsRouteWithChildren
  LibraryRoute: typeof LibraryRoute
  PlaylistsRoute: typeof PlaylistsRouteWithChildren
  SettingsRoute: typeof SettingsRouteWithChildren
  TracksTrackIDRoute: typeof TracksTrackIDRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artists': {
      id: '/artists'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tracks/$trackID': {
      id: '/tracks/$trackID'
      path: '/tracks/$trackID'
      fullPath: '/tracks/$trackID'
      preLoaderRoute: typeof TracksTrackIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/ui': {
      id: '/settings/ui'
      path: '/ui'
      fullPath: '/settings/ui'
      preLoaderRoute: typeof SettingsUiRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/library': {
      id: '/settings/library'
      path: '/library'
      fullPath: '/settings/library'
      preLoaderRoute: typeof SettingsLibraryRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/audio': {
      id: '/settings/audio'
      path: '/audio'
      fullPath: '/settings/audio'
      preLoaderRoute: typeof SettingsAudioRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/about': {
      id: '/settings/about'
      path: '/about'
      fullPath: '/settings/about'
      preLoaderRoute: typeof SettingsAboutRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/playlists/$playlistID': {
      id: '/playlists/$playlistID'
      path: '/$playlistID'
      fullPath: '/playlists/$playlistID'
      preLoaderRoute: typeof PlaylistsPlaylistIDRouteImport
      parentRoute: typeof PlaylistsRoute
    }
    '/artists/$artistID': {
      id: '/artists/$artistID'
      path: '/$artistID'
      fullPath: '/artists/$artistID'
      preLoaderRoute: typeof ArtistsArtistIDRouteImport
      parentRoute: typeof ArtistsRoute
    }
  }
}

interface ArtistsRouteChildren {
  ArtistsArtistIDRoute: typeof ArtistsArtistIDRoute
}

const ArtistsRouteChildren: ArtistsRouteChildren = {
  ArtistsArtistIDRoute: ArtistsArtistIDRoute,
}

const ArtistsRouteWithChildren =
  ArtistsRoute._addFileChildren(ArtistsRouteChildren)

interface PlaylistsRouteChildren {
  PlaylistsPlaylistIDRoute: typeof PlaylistsPlaylistIDRoute
}

const PlaylistsRouteChildren: PlaylistsRouteChildren = {
  PlaylistsPlaylistIDRoute: PlaylistsPlaylistIDRoute,
}

const PlaylistsRouteWithChildren = PlaylistsRoute._addFileChildren(
  PlaylistsRouteChildren,
)

interface SettingsRouteChildren {
  SettingsAboutRoute: typeof SettingsAboutRoute
  SettingsAudioRoute: typeof SettingsAudioRoute
  SettingsLibraryRoute: typeof SettingsLibraryRoute
  SettingsUiRoute: typeof SettingsUiRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsAboutRoute: SettingsAboutRoute,
  SettingsAudioRoute: SettingsAudioRoute,
  SettingsLibraryRoute: SettingsLibraryRoute,
  SettingsUiRoute: SettingsUiRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ArtistsRoute: ArtistsRouteWithChildren,
  LibraryRoute: LibraryRoute,
  PlaylistsRoute: PlaylistsRouteWithChildren,
  SettingsRoute: SettingsRouteWithChildren,
  TracksTrackIDRoute: TracksTrackIDRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
