/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlaylistsImport } from './routes/playlists'
import { Route as LibraryImport } from './routes/library'
import { Route as TracksTrackIDImport } from './routes/tracks.$trackID'
import { Route as SettingsLayoutImport } from './routes/settings._layout'
import { Route as PlaylistsPlaylistIDImport } from './routes/playlists.$playlistID'
import { Route as SettingsLayoutLibraryImport } from './routes/settings._layout.library'
import { Route as SettingsLayoutInterfaceImport } from './routes/settings._layout.interface'
import { Route as SettingsLayoutAudioImport } from './routes/settings._layout.audio'
import { Route as SettingsLayoutAboutImport } from './routes/settings._layout.about'

// Create Virtual Routes

const SettingsImport = createFileRoute('/settings')()

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsRoute = PlaylistsImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRoute,
} as any)

const LibraryRoute = LibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const TracksTrackIDRoute = TracksTrackIDImport.update({
  id: '/tracks/$trackID',
  path: '/tracks/$trackID',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLayoutRoute = SettingsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => SettingsRoute,
} as any)

const PlaylistsPlaylistIDRoute = PlaylistsPlaylistIDImport.update({
  id: '/$playlistID',
  path: '/$playlistID',
  getParentRoute: () => PlaylistsRoute,
} as any)

const SettingsLayoutLibraryRoute = SettingsLayoutLibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutInterfaceRoute = SettingsLayoutInterfaceImport.update({
  id: '/interface',
  path: '/interface',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutAudioRoute = SettingsLayoutAudioImport.update({
  id: '/audio',
  path: '/audio',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

const SettingsLayoutAboutRoute = SettingsLayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => SettingsLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$playlistID': {
      id: '/playlists/$playlistID'
      path: '/$playlistID'
      fullPath: '/playlists/$playlistID'
      preLoaderRoute: typeof PlaylistsPlaylistIDImport
      parentRoute: typeof PlaylistsImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/settings/_layout': {
      id: '/settings/_layout'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLayoutImport
      parentRoute: typeof SettingsRoute
    }
    '/tracks/$trackID': {
      id: '/tracks/$trackID'
      path: '/tracks/$trackID'
      fullPath: '/tracks/$trackID'
      preLoaderRoute: typeof TracksTrackIDImport
      parentRoute: typeof rootRoute
    }
    '/settings/_layout/about': {
      id: '/settings/_layout/about'
      path: '/about'
      fullPath: '/settings/about'
      preLoaderRoute: typeof SettingsLayoutAboutImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/audio': {
      id: '/settings/_layout/audio'
      path: '/audio'
      fullPath: '/settings/audio'
      preLoaderRoute: typeof SettingsLayoutAudioImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/interface': {
      id: '/settings/_layout/interface'
      path: '/interface'
      fullPath: '/settings/interface'
      preLoaderRoute: typeof SettingsLayoutInterfaceImport
      parentRoute: typeof SettingsLayoutImport
    }
    '/settings/_layout/library': {
      id: '/settings/_layout/library'
      path: '/library'
      fullPath: '/settings/library'
      preLoaderRoute: typeof SettingsLayoutLibraryImport
      parentRoute: typeof SettingsLayoutImport
    }
  }
}

// Create and export the route tree

interface PlaylistsRouteChildren {
  PlaylistsPlaylistIDRoute: typeof PlaylistsPlaylistIDRoute
}

const PlaylistsRouteChildren: PlaylistsRouteChildren = {
  PlaylistsPlaylistIDRoute: PlaylistsPlaylistIDRoute,
}

const PlaylistsRouteWithChildren = PlaylistsRoute._addFileChildren(
  PlaylistsRouteChildren,
)

interface SettingsLayoutRouteChildren {
  SettingsLayoutAboutRoute: typeof SettingsLayoutAboutRoute
  SettingsLayoutAudioRoute: typeof SettingsLayoutAudioRoute
  SettingsLayoutInterfaceRoute: typeof SettingsLayoutInterfaceRoute
  SettingsLayoutLibraryRoute: typeof SettingsLayoutLibraryRoute
}

const SettingsLayoutRouteChildren: SettingsLayoutRouteChildren = {
  SettingsLayoutAboutRoute: SettingsLayoutAboutRoute,
  SettingsLayoutAudioRoute: SettingsLayoutAudioRoute,
  SettingsLayoutInterfaceRoute: SettingsLayoutInterfaceRoute,
  SettingsLayoutLibraryRoute: SettingsLayoutLibraryRoute,
}

const SettingsLayoutRouteWithChildren = SettingsLayoutRoute._addFileChildren(
  SettingsLayoutRouteChildren,
)

interface SettingsRouteChildren {
  SettingsLayoutRoute: typeof SettingsLayoutRouteWithChildren
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsLayoutRoute: SettingsLayoutRouteWithChildren,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings': typeof SettingsLayoutRouteWithChildren
  '/tracks/$trackID': typeof TracksTrackIDRoute
  '/settings/about': typeof SettingsLayoutAboutRoute
  '/settings/audio': typeof SettingsLayoutAudioRoute
  '/settings/interface': typeof SettingsLayoutInterfaceRoute
  '/settings/library': typeof SettingsLayoutLibraryRoute
}

export interface FileRoutesByTo {
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings': typeof SettingsLayoutRouteWithChildren
  '/tracks/$trackID': typeof TracksTrackIDRoute
  '/settings/about': typeof SettingsLayoutAboutRoute
  '/settings/audio': typeof SettingsLayoutAudioRoute
  '/settings/interface': typeof SettingsLayoutInterfaceRoute
  '/settings/library': typeof SettingsLayoutLibraryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/playlists/$playlistID': typeof PlaylistsPlaylistIDRoute
  '/settings': typeof SettingsRouteWithChildren
  '/settings/_layout': typeof SettingsLayoutRouteWithChildren
  '/tracks/$trackID': typeof TracksTrackIDRoute
  '/settings/_layout/about': typeof SettingsLayoutAboutRoute
  '/settings/_layout/audio': typeof SettingsLayoutAudioRoute
  '/settings/_layout/interface': typeof SettingsLayoutInterfaceRoute
  '/settings/_layout/library': typeof SettingsLayoutLibraryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/library'
    | '/playlists'
    | '/playlists/$playlistID'
    | '/settings'
    | '/tracks/$trackID'
    | '/settings/about'
    | '/settings/audio'
    | '/settings/interface'
    | '/settings/library'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/library'
    | '/playlists'
    | '/playlists/$playlistID'
    | '/settings'
    | '/tracks/$trackID'
    | '/settings/about'
    | '/settings/audio'
    | '/settings/interface'
    | '/settings/library'
  id:
    | '__root__'
    | '/library'
    | '/playlists'
    | '/playlists/$playlistID'
    | '/settings'
    | '/settings/_layout'
    | '/tracks/$trackID'
    | '/settings/_layout/about'
    | '/settings/_layout/audio'
    | '/settings/_layout/interface'
    | '/settings/_layout/library'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LibraryRoute: typeof LibraryRoute
  PlaylistsRoute: typeof PlaylistsRouteWithChildren
  SettingsRoute: typeof SettingsRouteWithChildren
  TracksTrackIDRoute: typeof TracksTrackIDRoute
}

const rootRouteChildren: RootRouteChildren = {
  LibraryRoute: LibraryRoute,
  PlaylistsRoute: PlaylistsRouteWithChildren,
  SettingsRoute: SettingsRouteWithChildren,
  TracksTrackIDRoute: TracksTrackIDRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/library",
        "/playlists",
        "/settings",
        "/tracks/$trackID"
      ]
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/playlists": {
      "filePath": "playlists.tsx",
      "children": [
        "/playlists/$playlistID"
      ]
    },
    "/playlists/$playlistID": {
      "filePath": "playlists.$playlistID.tsx",
      "parent": "/playlists"
    },
    "/settings": {
      "filePath": "/",
      "children": [
        "/settings/_layout"
      ]
    },
    "/settings/_layout": {
      "filePath": "settings._layout.tsx",
      "parent": "/settings",
      "children": [
        "/settings/_layout/about",
        "/settings/_layout/audio",
        "/settings/_layout/interface",
        "/settings/_layout/library"
      ]
    },
    "/tracks/$trackID": {
      "filePath": "tracks.$trackID.tsx"
    },
    "/settings/_layout/about": {
      "filePath": "settings._layout.about.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/audio": {
      "filePath": "settings._layout.audio.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/interface": {
      "filePath": "settings._layout.interface.tsx",
      "parent": "/settings/_layout"
    },
    "/settings/_layout/library": {
      "filePath": "settings._layout.library.tsx",
      "parent": "/settings/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
